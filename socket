// === SIMPLE FALLBACK FUNCTION ===
// Create a simple addSocket function immediately as fallback
window.addSocket = function(section) {
  console.log(`üîß Simple addSocket called for section: ${section}`);
  
  const container = document.querySelector(`.socket-container[data-section="${section}"]`);
  if (!container) {
    console.error(`‚ùå No socket container found for section: ${section}`);
    return;
  }
  
  const socketGrid = container.querySelector('.socket-grid');
  if (!socketGrid) {
    console.error(`‚ùå No socket grid found in container for section: ${section}`);
    return;
  }
  
  const existingSockets = socketGrid.children.length;
  const maxSockets = 6;
  
  console.log(`üìä Section ${section}: ${existingSockets}/${maxSockets} sockets`);
  
  if (existingSockets >= maxSockets) {
    alert(`Maximum ${maxSockets} sockets allowed`);
    return;
  }
  
  const newSocket = document.createElement('div');
  newSocket.className = 'socket-slot empty';
  newSocket.dataset.index = existingSockets.toString();
  
  // Add click handler for the new socket
  newSocket.addEventListener('click', function() {
    console.log('Socket clicked!');
    // You can add socket modal functionality here later
  });
  
  socketGrid.appendChild(newSocket);
  
  const newSocketCount = existingSockets + 1;
  socketGrid.className = `socket-grid sockets-${newSocketCount}`;
  
  console.log(`‚úÖ Added socket ${newSocketCount} to ${section}`);
};

console.log('üîß Simple addSocket function created');

// Ultra-Lightweight Unified Socket System v2.0
// Combines main-init.js, socket-system.js, and character.js into one fast file

class UnifiedSocketSystem {
  constructor() {
    this.isInitializing = true;
    this.currentLevel = 1;
    this.currentSocket = null;
    this.targetSocket = null;
    
    // Character stats
    this.classStats = {
      'Amazon': { str: 20, dex: 25, vit: 20, enr: 15 },
      'Necromancer': { str: 15, dex: 25, vit: 15, enr: 25 },
      'Barbarian': { str: 30, dex: 20, vit: 25, enr: 10 },
      'Sorceress': { str: 10, dex: 25, vit: 10, enr: 35 },
      'Paladin': { str: 25, dex: 20, vit: 25, enr: 15 },
      'Assassin': { str: 20, dex: 20, vit: 20, enr: 25 },
      'Druid': { str: 15, dex: 20, vit: 25, enr: 20 }
    };
    
    // Equipment mapping for ultra-fast lookups
    this.equipmentMap = {
      'weapons-dropdown': { info: 'weapon-info', section: 'weapon' },
      'helms-dropdown': { info: 'helm-info', section: 'helm' },
      'armors-dropdown': { info: 'armor-info', section: 'armor' },
      'offs-dropdown': { info: 'off-info', section: 'shield' },
      'gloves-dropdown': { info: 'glove-info', section: 'gloves' },
      'belts-dropdown': { info: 'belt-info', section: 'belts' },
      'boots-dropdown': { info: 'boot-info', section: 'boots' },
      'ringsone-dropdown': { info: 'ringsone-info', section: 'ringone' },
      'ringstwo-dropdown': { info: 'ringstwo-info', section: 'ringtwo' },
      'amulets-dropdown': { info: 'amulet-info', section: 'amulet' }
    };
    
    // Fast stats tracking
    this.stats = {
      strength: 0, dexterity: 0, vitality: 0, energy: 0,
      allSkills: 0, magicFind: 0, goldFind: 0, defense: 0,
      ias: 0, fcr: 0, frw: 0, fhr: 0,
      fireResist: 0, coldResist: 0, lightResist: 0, poisonResist: 0,
      crushingBlow: 0, deadlyStrike: 0, openWounds: 0,
      life: 0, mana: 0, dr: 0, pdr: 0, mdr: 0, cbf: false
    };
    
    // Jewel system
    this.selectedJewelColor = 'white';
    this.selectedJewelPrefix = null;
    this.selectedJewelSuffix = null;
    this.selectedJewelPrefixValue = null;
    this.selectedJewelSuffixValue = null;
    
    this.initializeSocketData();
    this.initializeJewelData();
    this.init();
  }
  
  init() {
    console.log('‚ö° Initializing Ultra-Fast Socket System...');
    
    try {
      this.addStyles();
      console.log('‚úÖ Styles added');
      
      this.createSocketModal();
      console.log('‚úÖ Socket modal created');
      
      this.createJewelModal();
      console.log('‚úÖ Jewel modal created');
      
      this.initializeSocketContainers();
      console.log('‚úÖ Socket containers initialized');
      
      this.setupEventListeners();
      console.log('‚úÖ Event listeners setup');
      
      // Make addSocket globally available immediately
      window.addSocket = (section) => {
        console.log(`üåê Global addSocket called for section: ${section}`);
        this.addSocket(section);
      };
      console.log('‚úÖ Global addSocket function created');
      
      setTimeout(() => {
        this.isInitializing = false;
        this.updateAll();
        console.log('‚úÖ Socket System Ready!');
      }, 100);
      
    } catch (error) {
      console.error('‚ùå Error during initialization:', error);
    }
  }

  // === SOCKET DATA INITIALIZATION ===
  initializeSocketData() {
    this.socketData = {
      runes: {
        'el': { name: 'El Rune', img: 'img/elrune.png', levelReq: 11, 
          stats: { weapon: '+50 to Attack Rating, +1 Light Radius', armor: '+15 Defense, +1 Light Radius', helm: '+15 Defense, +1 Light Radius', shield: '+15 Defense, +1 Light Radius' }},
        'eld': { name: 'Eld Rune', img: 'img/eldrune.png', levelReq: 11, 
          stats: { weapon: '+75% Damage to Undead, +50 Attack Rating Against Undead', armor: '15% Slower Stamina Drain', helm: '15% Slower Stamina Drain', shield: '7% Increased Chance of Blocking' }},
        'tir': { name: 'Tir Rune', img: 'img/tirrune.png', levelReq: 13, 
          stats: { weapon: '+2 to Mana After Each Kill', armor: '+2 to Mana After Each Kill', helm: '+2 to Mana After Each Kill', shield: '+2 to Mana After Each Kill' }},
        'nef': { name: 'Nef Rune', img: 'img/nefrune.png', levelReq: 13, 
          stats: { weapon: 'Knockback', armor: '+30 Defense vs. Missile', helm: '+30 Defense vs. Missile', shield: '+30 Defense vs. Missile' }},
        'eth': { name: 'Eth Rune', img: 'img/ethrune.png', levelReq: 15, 
          stats: { weapon: '-25% Target Defense', armor: 'Regenerate Mana 15%', helm: 'Regenerate Mana 15%', shield: 'Regenerate Mana 15%' }},
        'ith': { name: 'Ith Rune', img: 'img/ithrune.png', levelReq: 15, 
          stats: { weapon: '+9 to Maximum Damage', armor: '15% Damage Taken Goes To Mana', helm: '15% Damage Taken Goes To Mana', shield: '15% Damage Taken Goes To Mana' }},
        'tal': { name: 'Tal Rune', img: 'img/talrune.png', levelReq: 17, 
          stats: { weapon: '+75 Poison Damage Over 5 Seconds', armor: 'Poison Resist +30%', helm: 'Poison Resist +30%', shield: 'Poison Resist +35%' }},
        'ral': { name: 'Ral Rune', img: 'img/ralrune.png', levelReq: 19, 
          stats: { weapon: '+5-30 Fire Damage', armor: 'Fire Resist +30%', helm: 'Fire Resist +30%', shield: 'Fire Resist +35%' }},
        'ort': { name: 'Ort Rune', img: 'img/ortrune.png', levelReq: 21, 
          stats: { weapon: '+1-50 Lightning Damage', armor: 'Lightning Resist +30%', helm: 'Lightning Resist +30%', shield: 'Lightning Resist +35%' }},
        'thul': { name: 'Thul Rune', img: 'img/thulrune.png', levelReq: 23, 
          stats: { weapon: '+3-14 Cold Damage', armor: 'Cold Resist +30%', helm: 'Cold Resist +30%', shield: 'Cold Resist +35%' }},
        'amn': { name: 'Amn Rune', img: 'img/amnrune.png', levelReq: 25, 
          stats: { weapon: '7% Life Stolen Per Hit', armor: 'Attacker Takes Damage of 14', helm: 'Attacker Takes Damage of 14', shield: 'Attacker Takes Damage of 14' }},
        'sol': { name: 'Sol Rune', img: 'img/solrune.png', levelReq: 27, 
          stats: { weapon: '+9 Minimum Damage', armor: 'Damage Reduced By 7', helm: 'Damage Reduced By 7', shield: 'Damage Reduced By 7' }},
        'shael': { name: 'Shael Rune', img: 'img/shaelrune.png', levelReq: 29, 
          stats: { weapon: '20% Increased Attack Speed', armor: '20% Faster Hit Recovery', helm: '20% Faster Hit Recovery', shield: '20% Faster Block Rate' }},
        'dol': { name: 'Dol Rune', img: 'img/dolrune.png', levelReq: 31, 
          stats: { weapon: 'Hit Causes Monster To Flee 25%', armor: 'Replenish Life +7', helm: 'Replenish Life +7', shield: 'Replenish Life +7' }},
        'hel': { name: 'Hel Rune', img: 'img/helrune.png', levelReq: 33, 
          stats: { weapon: 'Requirements -20%', armor: 'Requirements -15%', helm: 'Requirements -15%', shield: 'Requirements -15%' }},
        'io': { name: 'Io Rune', img: 'img/iorune.png', levelReq: 35, 
          stats: { weapon: '+10 to Vitality', armor: '+10 to Vitality', helm: '+10 to Vitality', shield: '+10 to Vitality' }},
        'lum': { name: 'Lum Rune', img: 'img/lumrune.png', levelReq: 37, 
          stats: { weapon: '+10 to Energy', armor: '+10 to Energy', helm: '+10 to Energy', shield: '+10 to Energy' }},
        'ko': { name: 'Ko Rune', img: 'img/korune.png', levelReq: 39, 
          stats: { weapon: '+10 to Dexterity', armor: '+10 to Dexterity', helm: '+10 to Dexterity', shield: '+10 to Dexterity' }},
        'fal': { name: 'Fal Rune', img: 'img/falrune.png', levelReq: 41, 
          stats: { weapon: '+10 to Strength', armor: '+10 to Strength', helm: '+10 to Strength', shield: '+10 to Strength' }},
        'lem': { name: 'Lem Rune', img: 'img/lemrune.png', levelReq: 43, 
          stats: { weapon: '75% Extra Gold From Monsters', armor: '50% Extra Gold From Monsters', helm: '50% Extra Gold From Monsters', shield: '50% Extra Gold From Monsters' }},
        'pul': { name: 'Pul Rune', img: 'img/pulrune.png', levelReq: 45, 
          stats: { weapon: '+75% Damage to Demons, +100 Attack Rating Against Demons', armor: '+30% Enhanced Defense', helm: '+30% Enhanced Defense', shield: '+30% Enhanced Defense' }},
        'um': { name: 'Um Rune', img: 'img/umrune.png', levelReq: 47, 
          stats: { weapon: '25% Chance of Open Wounds', armor: 'All Resistances +15', helm: 'All Resistances +15', shield: 'All Resistances +22' }},
        'mal': { name: 'Mal Rune', img: 'img/malrune.png', levelReq: 49, 
          stats: { weapon: 'Prevent Monster Heal', armor: 'Magic Damage Reduced By 7', helm: 'Magic Damage Reduced By 7', shield: 'Magic Damage Reduced By 7' }},
        'ist': { name: 'Ist Rune', img: 'img/istrune.png', levelReq: 51, 
          stats: { weapon: '30% Better Chance of Getting Magic Items', armor: '25% Better Chance of Getting Magic Items', helm: '25% Better Chance of Getting Magic Items', shield: '25% Better Chance of Getting Magic Items' }},
        'gul': { name: 'Gul Rune', img: 'img/gulrune.png', levelReq: 53, 
          stats: { weapon: '20% Bonus to Attack Rating', armor: '5% to Maximum Poison Resist', helm: '5% to Maximum Poison Resist', shield: '5% to Maximum Poison Resist' }},
        'vex': { name: 'Vex Rune', img: 'img/vexrune.png', levelReq: 55, 
          stats: { weapon: '7% Mana Stolen Per Hit', armor: '5% to Maximum Fire Resist', helm: '5% to Maximum Fire Resist', shield: '5% to Maximum Fire Resist' }},
        'ohm': { name: 'Ohm Rune', img: 'img/ohmrune.png', levelReq: 57, 
          stats: { weapon: '+50% Enhanced Damage', armor: '5% to Maximum Cold Resist', helm: '5% to Maximum Cold Resist', shield: '5% to Maximum Cold Resist' }},
        'lo': { name: 'Lo Rune', img: 'img/lorune.png', levelReq: 59, 
          stats: { weapon: '20% Deadly Strike', armor: '5% to Maximum Lightning Resist', helm: '5% to Maximum Lightning Resist', shield: '5% to Maximum Lightning Resist' }},
        'sur': { name: 'Sur Rune', img: 'img/surrune.png', levelReq: 61, 
          stats: { weapon: 'Hit Blinds Target', armor: 'Maximum Mana 5%', helm: 'Maximum Mana 5%', shield: '+50 to Mana' }},
        'ber': { name: 'Ber Rune', img: 'img/berrune.png', levelReq: 63, 
          stats: { weapon: '20% Chance of Crushing Blow', armor: 'Damage Reduced by 8%', helm: 'Damage Reduced by 8%', shield: 'Damage Reduced by 8%' }},
        'jah': { name: 'Jah Rune', img: 'img/jahrune.png', levelReq: 65, 
          stats: { weapon: 'Ignore Target\'s Defense', armor: 'Increase Maximum Life 5%', helm: 'Increase Maximum Life 5%', shield: '+75 to Life' }},
        'cham': { name: 'Cham Rune', img: 'img/chamrune.png', levelReq: 67, 
          stats: { weapon: 'Freezes Target +3', armor: 'Cannot Be Frozen', helm: 'Cannot Be Frozen', shield: 'Cannot Be Frozen' }},
        'zod': { name: 'Zod Rune', img: 'img/zodrune.png', levelReq: 69, 
          stats: { weapon: 'Indestructible', armor: 'Indestructible', helm: 'Indestructible', shield: 'Indestructible' }}
      },
      jewels: {
        'rare-jewel': { name: 'Rare Jewel', img: 'img/jewel1.png', levelReq: 1, 
          stats: { weapon: '+15% Enhanced Damage', armor: '+15% Enhanced Damage', helm: '+15% Enhanced Damage', shield: '+15% Enhanced Damage' }}
      }
    };
  }

  initializeJewelData() {
    this.jewelPrefixes = {
      'sharp': { name: 'Sharp', effect: '1 to 50 Enhanced Damage' },
      'fine': { name: 'Fine', effect: '51 to 100 Enhanced Damage' },
      'warrior\'s': { name: 'Warrior\'s', effect: '101 to 150 Enhanced Damage' },
      'soldier\'s': { name: 'Soldier\'s', effect: '151 to 200 Enhanced Damage' },
      'knight\'s': { name: 'Knight\'s', effect: '201 to 300 Enhanced Damage' },
      'lord\'s': { name: 'Lord\'s', effect: '301 to 400 Enhanced Damage' },
      'king\'s': { name: 'King\'s', effect: '401 to 500 Enhanced Damage' },
      'sturdy': { name: 'Sturdy', effect: '1 to 25 to Life' },
      'strong': { name: 'Strong', effect: '26 to 50 to Life' },
      'glorious': { name: 'Glorious', effect: '51 to 75 to Life' },
      'blessed': { name: 'Blessed', effect: '76 to 100 to Life' },
      'saintly': { name: 'Saintly', effect: '101 to 150 to Life' },
      'awesome': { name: 'Awesome', effect: '151 to 200 to Life' },
      'holy': { name: 'Holy', effect: '201 to 300 to Life' }
    };
    
    this.jewelSuffixes = {
      'of_the_mammoth': { name: 'of the Mammoth', effect: '21 to 30 to Life' },
      'of_the_colossus': { name: 'of the Colossus', effect: '31 to 40 to Life' },
      'of_the_squid': { name: 'of the Squid', effect: '21 to 30 to Mana' },
      'of_the_whale': { name: 'of the Whale', effect: '31 to 40 to Mana' },
      'of_perfection': { name: 'of Perfection', effect: '15 to All Resistances' },
      'of_balance': { name: 'of Balance', effect: '20 Faster Hit Recovery' },
      'of_stability': { name: 'of Stability', effect: '30 Faster Hit Recovery' },
      'of_fervor': { name: 'of Fervor', effect: '7 Increased Attack Speed' },
      'of_alacrity': { name: 'of Alacrity', effect: '10 Increased Attack Speed' }
    };
  }

  // === CHARACTER SYSTEM ===
  handleClassChange() {
    const classSelect = document.getElementById('selectClass');
    if (!classSelect) return;
    
    const selectedClass = classSelect.value;
    const baseStats = this.classStats[selectedClass];
    
    if (baseStats) {
      document.getElementById('str').value = baseStats.str;
      document.getElementById('dex').value = baseStats.dex;
      document.getElementById('vit').value = baseStats.vit;
      document.getElementById('enr').value = baseStats.enr;
      this.updateAll();
    }
  }
  
  handleLevelChange() {
    const levelInput = document.getElementById('lvlValue');
    if (!levelInput) return;
    
    let level = parseInt(levelInput.value) || 1;
    level = Math.max(1, Math.min(99, level));
    
    if (level !== parseInt(levelInput.value)) {
      levelInput.value = level;
    }
    
    this.currentLevel = level;
    this.updateAll();
  }

  // === LEVEL REQUIREMENT SYSTEM ===
  calculateActualRequiredLevel(section, itemKey) {
    const item = itemList[itemKey];
    if (!item) return 1;
    
    let highestLevel = item.properties?.reqlvl || 1;
    const sockets = document.querySelectorAll(`.socket-container[data-section="${section}"] .socket-slot.filled`);
    
    sockets.forEach(socket => {
      const socketLevel = parseInt(socket.dataset.levelReq) || 1;
      if (socketLevel > highestLevel) {
        highestLevel = socketLevel;
      }
    });
    
    return highestLevel;
  }
  
  checkItemRequirement(dropdown, section) {
    if (!dropdown.value || !itemList[dropdown.value]) return true;
    
    const actualLevel = this.calculateActualRequiredLevel(section, dropdown.value);
    const meetsReq = this.currentLevel >= actualLevel;
    
    dropdown.style.color = meetsReq ? '#00ff00' : '#ff5555';
    return meetsReq;
  }

  // === STATS CALCULATION ===
  updateAll() {
    if (this.isInitializing) return;
    
    this.resetAllStats();
    this.calculateEquipmentStats();
    this.calculateSocketStats();
    this.updateStatsDisplay();
    this.updateAttributeTotals();
    this.updateAllDisplays();
  }
  
  resetAllStats() {
    Object.keys(this.stats).forEach(key => {
      this.stats[key] = typeof this.stats[key] === 'boolean' ? false : 0;
    });
  }
  
  calculateEquipmentStats() {
    Object.entries(this.equipmentMap).forEach(([dropdownId, config]) => {
      const dropdown = document.getElementById(dropdownId);
      if (!dropdown?.value || !itemList[dropdown.value]) return;
      
      const item = itemList[dropdown.value];
      const meetsReq = this.checkItemRequirement(dropdown, config.section);
      
      if (meetsReq && item.properties) {
        this.stats.strength += item.properties.str || 0;
        this.stats.dexterity += item.properties.dex || 0;
        this.stats.vitality += item.properties.vit || 0;
        this.stats.energy += item.properties.enr || 0;
      }
    });
  }
  
  calculateSocketStats() {
    const sections = ['weapon', 'helm', 'armor', 'shield', 'gloves', 'belts', 'boots', 'ringone', 'ringtwo', 'amulet'];
    
    sections.forEach(section => {
      const dropdownIdMap = {
        'weapon': 'weapons-dropdown', 'helm': 'helms-dropdown', 'armor': 'armors-dropdown',
        'shield': 'offs-dropdown', 'gloves': 'gloves-dropdown', 'belts': 'belts-dropdown',
        'boots': 'boots-dropdown', 'ringone': 'ringsone-dropdown', 'ringtwo': 'ringstwo-dropdown',
        'amulet': 'amulets-dropdown'
      };
      
      const dropdown = document.getElementById(dropdownIdMap[section]);
      if (!dropdown?.value) return;
      
      const actualRequiredLevel = this.calculateActualRequiredLevel(section, dropdown.value);
      
      if (this.currentLevel >= actualRequiredLevel) {
        const sockets = document.querySelectorAll(`.socket-container[data-section="${section}"] .socket-slot.filled`);
        sockets.forEach(socket => {
          const stats = socket.dataset.stats;
          const socketLevelReq = parseInt(socket.dataset.levelReq) || 1;
          
          if (stats && this.currentLevel >= socketLevelReq) {
            this.parseSocketStats(stats);
          }
        });
      }
    });
  }
  
  parseSocketStats(statsText) {
    // Attributes
    const strengthMatch = statsText.match(/\+(\d+)\s+(?:to\s+)?Strength/i);
    if (strengthMatch) this.stats.strength += parseInt(strengthMatch[1]);
    
    const dexMatch = statsText.match(/\+(\d+)\s+(?:to\s+)?Dexterity/i);
    if (dexMatch) this.stats.dexterity += parseInt(dexMatch[1]);
    
    const vitMatch = statsText.match(/\+(\d+)\s+(?:to\s+)?Vitality/i);
    if (vitMatch) this.stats.vitality += parseInt(vitMatch[1]);
    
    const energyMatch = statsText.match(/\+(\d+)\s+(?:to\s+)?Energy/i);
    if (energyMatch) this.stats.energy += parseInt(energyMatch[1]);
    
    // All Skills
    const skillMatch = statsText.match(/\+(\d+)\s+(?:to\s+)?All\s+Skills/i);
    if (skillMatch) this.stats.allSkills += parseInt(skillMatch[1]);
    
    // Magic Find
    const mfMatch = statsText.match(/(\d+)%\s+Better\s+Chance\s+of\s+Getting\s+Magic\s+Items/i);
    if (mfMatch) this.stats.magicFind += parseInt(mfMatch[1]);
    
    // Gold Find
    const gfMatch = statsText.match(/(\d+)%\s+Extra\s+Gold\s+From\s+Monsters/i);
    if (gfMatch) this.stats.goldFind += parseInt(gfMatch[1]);
    
    // Resistances
    const allResMatch = statsText.match(/All\s+Resistances\s+\+(\d+)/i);
    if (allResMatch) {
      const value = parseInt(allResMatch[1]);
      this.stats.fireResist += value;
      this.stats.coldResist += value;
      this.stats.lightResist += value;
      this.stats.poisonResist += value;
    }
    
    const fireResMatch = statsText.match(/Fire\s+Resist\s+\+(\d+)/i);
    if (fireResMatch) this.stats.fireResist += parseInt(fireResMatch[1]);
    
    const coldResMatch = statsText.match(/Cold\s+Resist\s+\+(\d+)/i);
    if (coldResMatch) this.stats.coldResist += parseInt(coldResMatch[1]);
    
    const lightResMatch = statsText.match(/Lightning\s+Resist\s+\+(\d+)/i);
    if (lightResMatch) this.stats.lightResist += parseInt(lightResMatch[1]);
    
    const poisonResMatch = statsText.match(/Poison\s+Resist\s+\+(\d+)/i);
    if (poisonResMatch) this.stats.poisonResist += parseInt(poisonResMatch[1]);
    
    // Speed stats
    const iasMatch = statsText.match(/(\d+)%\s+Increased\s+Attack\s+Speed/i);
    if (iasMatch) this.stats.ias += parseInt(iasMatch[1]);
    
    const fcrMatch = statsText.match(/(\d+)%\s+Faster\s+Cast\s+Rate/i);
    if (fcrMatch) this.stats.fcr += parseInt(fcrMatch[1]);
    
    const frwMatch = statsText.match(/(\d+)%\s+Faster\s+Run\/Walk/i);
    if (frwMatch) this.stats.frw += parseInt(frwMatch[1]);
    
    const fhrMatch = statsText.match(/(\d+)%?\s+Faster\s+Hit\s+Recovery/i);
    if (fhrMatch) this.stats.fhr += parseInt(fhrMatch[1]);
    
    // Combat stats
    const cbMatch = statsText.match(/(\d+)%\s+Chance\s+of\s+Crushing\s+Blow/i);
    if (cbMatch) this.stats.crushingBlow += parseInt(cbMatch[1]);
    
    const dsMatch = statsText.match(/(\d+)%\s+Deadly\s+Strike/i);
    if (dsMatch) this.stats.deadlyStrike += parseInt(dsMatch[1]);
    
    const owMatch = statsText.match(/(\d+)%\s+Chance\s+of\s+Open\s+Wounds/i);
    if (owMatch) this.stats.openWounds += parseInt(owMatch[1]);
    
    // Life and Mana
    const lifeMatch = statsText.match(/\+(\d+)\s+(?:to\s+)?Life/i);
    if (lifeMatch) this.stats.life += parseInt(lifeMatch[1]);
    
    const manaMatch = statsText.match(/\+(\d+)\s+(?:to\s+)?Mana/i);
    if (manaMatch) this.stats.mana += parseInt(manaMatch[1]);
    
    // Defense and DR
    const defMatch = statsText.match(/\+(\d+)\s+Defense/i);
    if (defMatch) this.stats.defense += parseInt(defMatch[1]);
    
    const drMatch = statsText.match(/Damage\s+Reduced\s+by\s+(\d+)%?/i);
    if (drMatch) this.stats.dr += parseInt(drMatch[1]);
    
    // Cannot Be Frozen
    if (/Cannot\s+Be\s+Frozen/i.test(statsText)) {
      this.stats.cbf = true;
    }
  }
  
  updateStatsDisplay() {
    // Update using your actual HTML container IDs
    this.updateContainer('allSkillsValue', this.stats.allSkills);
    this.updateContainer('magicFindValue', this.stats.magicFind + '%');
    this.updateContainer('goldFindValue', this.stats.goldFind + '%');
    
    // Resistances - matching your HTML IDs
    this.updateContainer('fireresistcontainer', this.stats.fireResist + '%');
    this.updateContainer('coldresistcontainer', this.stats.coldResist + '%');
    this.updateContainer('lightresistcontainer', this.stats.lightResist + '%');
    this.updateContainer('poisonresistcontainer', this.stats.poisonResist + '%');
    
    // Speed stats - matching your HTML IDs  
    this.updateContainer('iascontainer', this.stats.ias + '%');
    this.updateContainer('fcrcontainer', this.stats.fcr + '%');
    this.updateContainer('frwcontainer', this.stats.frw + '%');
    this.updateContainer('fhrcontainer', this.stats.fhr + '%');
    
    // Combat stats - matching your HTML IDs
    this.updateContainer('deadlyStrikeValue', this.stats.deadlyStrike + '%');
    this.updateContainer('cbcontainer', this.stats.crushingBlow + '%');
    this.updateContainer('owcontainer', this.stats.openWounds + '%');
    
    // Other stats
    this.updateContainer('defenseValue', this.stats.defense);
    this.updateContainer('damageReductionValue', this.stats.dr + '%');
    this.updateContainer('cbfcontainer', this.stats.cbf ? 'Yes' : 'No');
  }
  
  updateContainer(id, value) {
    const element = document.getElementById(id);
    if (element) element.textContent = value;
  }
  
  updateAttributeTotals() {
    ['str', 'dex', 'vit', 'enr'].forEach(stat => {
      const base = parseInt(document.getElementById(stat)?.value) || 0;
      const statMap = { str: 'strength', dex: 'dexterity', vit: 'vitality', enr: 'energy' };
      const bonus = this.stats[statMap[stat]] || 0;
      
      let totalSpan = document.getElementById(stat + 'Total');
      if (!totalSpan && bonus > 0) {
        totalSpan = document.createElement('span');
        totalSpan.id = stat + 'Total';
        totalSpan.style.cssText = 'color: #00ff00; margin-left: 10px;';
        
        const input = document.getElementById(stat);
        if (input?.parentElement) {
          input.parentElement.appendChild(totalSpan);
        }
      }
      
      if (totalSpan) {
        totalSpan.textContent = bonus > 0 ? ` (${base + bonus})` : '';
      }
    });
  }
  
  updateAllDisplays() {
    Object.entries(this.equipmentMap).forEach(([dropdownId, config]) => {
      this.updateItemDisplay(config.section);
    });
  }
  
  updateItemDisplay(section) {
    const infoId = this.getSectionInfoId(section);
    const infoDiv = document.getElementById(infoId);
    if (!infoDiv) return;
    
    const dropdownId = this.getSectionDropdownId(section);
    const dropdown = document.getElementById(dropdownId);
    if (!dropdown?.value || !itemList[dropdown.value]) {
      infoDiv.innerHTML = '';
      return;
    }
    
    const item = itemList[dropdown.value];
    const actualLevel = this.calculateActualRequiredLevel(section, dropdown.value);
    const meetsReq = this.currentLevel >= actualLevel;
    
    let description = item.description;
    const enhancements = this.getSocketEnhancements(section);
    
    if (enhancements.length > 0) {
      description += '<br><br><span class="socket-enhanced-stat">Socket Enhanced Stats:</span>';
      enhancements.forEach(enhancement => {
        description += `<br><span class="socket-enhanced-stat">${enhancement}</span>`;
      });
    }
    
    if (actualLevel > 1) {
      const levelColor = meetsReq ? '#00ff00' : '#ff5555';
      description += `<br><span style="color: ${levelColor}">Required Level: ${actualLevel}</span>`;
    }
    
    infoDiv.innerHTML = description;
    infoDiv.style.opacity = meetsReq ? '1' : '0.6';
  }
  
  getSectionInfoId(section) {
    const mapping = {
      'weapon': 'weapon-info', 'helm': 'helm-info', 'armor': 'armor-info',
      'shield': 'off-info', 'gloves': 'glove-info', 'belts': 'belt-info',
      'boots': 'boot-info', 'ringone': 'ringsone-info', 'ringtwo': 'ringstwo-info',
      'amulet': 'amulet-info'
    };
    return mapping[section] || `${section}-info`;
  }
  
  getSectionDropdownId(section) {
    const mapping = {
      'weapon': 'weapons-dropdown', 'helm': 'helms-dropdown', 'armor': 'armors-dropdown',
      'shield': 'offs-dropdown', 'gloves': 'gloves-dropdown', 'belts': 'belts-dropdown',
      'boots': 'boots-dropdown', 'ringone': 'ringsone-dropdown', 'ringtwo': 'ringstwo-dropdown',
      'amulet': 'amulets-dropdown'
    };
    return mapping[section] || `${section}s-dropdown`;
  }
  
  getSocketEnhancements(section) {
    const enhancements = [];
    const sockets = document.querySelectorAll(`.socket-container[data-section="${section}"] .socket-slot.filled`);
    
    sockets.forEach(socket => {
      if (socket.dataset.stats) {
        enhancements.push(socket.dataset.stats);
      }
    });
    
    return enhancements;
  }

  // === SOCKET MODAL SYSTEM ===
  createSocketModal() {
    if (document.getElementById('socketModal')) return;
    
    const modal = document.createElement('div');
    modal.id = 'socketModal';
    modal.className = 'socket-modal';
    modal.innerHTML = `
      <div class="socket-modal-content">
        <span class="socket-close">&times;</span>
        <h3>Select Socket Item</h3>
        <div class="socket-tabs">
          <button class="socket-tab active" data-category="runes">Runes</button>
          <button class="socket-tab" data-category="jewels">Jewels</button>
        </div>
        <div id="socketItemGrid" class="socket-item-grid"></div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Event handlers
    modal.querySelector('.socket-close').onclick = () => this.hideSocketModal();
    modal.onclick = (e) => {
      if (e.target === modal) this.hideSocketModal();
    };
    
    modal.querySelectorAll('.socket-tab').forEach(tab => {
      tab.onclick = () => this.switchSocketTab(tab.dataset.category);
    });
  }
  
  createJewelModal() {
    if (document.getElementById('jewelModal')) return;
    
    const modal = document.createElement('div');
    modal.id = 'jewelModal';
    modal.className = 'socket-modal';
    modal.innerHTML = `
      <div class="socket-modal-content">
        <span class="socket-close">&times;</span>
        <h3>Create Custom Jewel</h3>
        
        <div class="jewel-creation-section">
          <h4>1. Select Color</h4>
          <div class="jewel-color-grid">
            ${['white', 'blue', 'yellow', 'green', 'orange', 'red'].map(color => `
              <div class="color-option ${color === 'white' ? 'selected' : ''}" data-color="${color}">
                <div class="color-circle ${color}-jewel"></div>
                <span>${color.charAt(0).toUpperCase() + color.slice(1)}</span>
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="jewel-creation-section">
          <h4>2. Select Prefix (Optional)</h4>
          <select id="jewelPrefixSelect">
            <option value="">No Prefix</option>
            ${Object.entries(this.jewelPrefixes).map(([key, prefix]) => 
              `<option value="${key}">${prefix.name} (${prefix.effect})</option>`
            ).join('')}
          </select>
          <div id="prefixValueContainer" style="display: none;">
            <label>Value: <span id="prefixValueDisplay">1</span></label>
            <input type="range" id="prefixValue" min="1" max="50" value="1">
          </div>
        </div>
        
        <div class="jewel-creation-section">
          <h4>3. Select Suffix (Optional)</h4>
          <select id="jewelSuffixSelect">
            <option value="">No Suffix</option>
            ${Object.entries(this.jewelSuffixes).map(([key, suffix]) => 
              `<option value="${key}">${suffix.name} (${suffix.effect})</option>`
            ).join('')}
          </select>
          <div id="suffixValueContainer" style="display: none;">
            <label>Value: <span id="suffixValueDisplay">1</span></label>
            <input type="range" id="suffixValue" min="1" max="50" value="1">
          </div>
        </div>
        
        <div class="jewel-creation-section">
          <h4>Preview</h4>
          <div id="jewelPreview">White Jewel</div>
        </div>
        
        <button id="createJewelBtn" class="create-jewel-btn">Create Jewel</button>
      </div>
    `;
    
    document.body.appendChild(modal);
    this.setupJewelModalEvents(modal);
  }
  
  setupJewelModalEvents(modal) {
    // Close modal
    modal.querySelector('.socket-close').onclick = () => this.hideJewelModal();
    modal.onclick = (e) => {
      if (e.target === modal) this.hideJewelModal();
    };
    
    // Color selection
    modal.querySelectorAll('.color-option').forEach(option => {
      option.onclick = () => {
        modal.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('selected'));
        option.classList.add('selected');
        this.selectedJewelColor = option.dataset.color;
        this.updateJewelPreview();
      };
    });
    
    // Prefix selection
    modal.querySelector('#jewelPrefixSelect').onchange = (e) => {
      this.selectedJewelPrefix = e.target.value;
      this.updatePrefixValueInput();
      this.updateJewelPreview();
    };
    
    // Suffix selection
    modal.querySelector('#jewelSuffixSelect').onchange = (e) => {
      this.selectedJewelSuffix = e.target.value;
      this.updateSuffixValueInput();
      this.updateJewelPreview();
    };
    
    // Value inputs
    modal.querySelector('#prefixValue').oninput = (e) => {
      this.selectedJewelPrefixValue = e.target.value;
      modal.querySelector('#prefixValueDisplay').textContent = e.target.value;
      this.updateJewelPreview();
    };
    
    modal.querySelector('#suffixValue').oninput = (e) => {
      this.selectedJewelSuffixValue = e.target.value;
      modal.querySelector('#suffixValueDisplay').textContent = e.target.value;
      this.updateJewelPreview();
    };
    
    // Create jewel button
    modal.querySelector('#createJewelBtn').onclick = () => this.createCustomJewel();
  }
  
  showSocketModal() {
    const modal = document.getElementById('socketModal');
    if (modal) {
      modal.style.display = 'flex';
      this.switchSocketTab('runes'); // Default to runes
    }
  }
  
  hideSocketModal() {
    const modal = document.getElementById('socketModal');
    if (modal) modal.style.display = 'none';
    this.currentSocket = null;
  }
  
  showJewelModal() {
    const modal = document.getElementById('jewelModal');
    if (modal) {
      modal.style.display = 'flex';
      this.resetJewelModal();
    }
  }
  
  hideJewelModal() {
    const modal = document.getElementById('jewelModal');
    if (modal) modal.style.display = 'none';
    this.targetSocket = null;
  }
  
  switchSocketTab(category) {
    const tabs = document.querySelectorAll('.socket-tab');
    tabs.forEach(tab => tab.classList.remove('active'));
    document.querySelector(`[data-category="${category}"]`).classList.add('active');
    
    this.populateSocketItems(category);
  }
  
  populateSocketItems(category) {
    const grid = document.getElementById('socketItemGrid');
    if (!grid) return;
    
    grid.innerHTML = '';
    
    // Add custom jewel option for jewels category
    if (category === 'jewels') {
      const customJewelDiv = document.createElement('div');
      customJewelDiv.className = 'socket-item custom-jewel-item';
      customJewelDiv.innerHTML = `
        <img src="img/jewel1.png" alt="Custom Jewel">
        <div class="socket-item-name">Create Custom Jewel</div>
      `;
      customJewelDiv.onclick = () => {
        if (!this.currentSocket) {
          alert('Please try clicking the socket again.');
          return;
        }
        this.targetSocket = this.currentSocket;
        this.hideSocketModal();
        this.showJewelModal();
      };
      grid.appendChild(customJewelDiv);
    }
    
    // Add regular socket items
    const items = this.socketData[category];
    for (const [key, item] of Object.entries(items)) {
      const itemDiv = document.createElement('div');
      itemDiv.className = 'socket-item';
      itemDiv.dataset.itemKey = key;
      itemDiv.dataset.category = category;
      
      itemDiv.innerHTML = `
        <img src="${item.img}" alt="${item.name}" onerror="this.src='img/placeholder.png'">
        <div class="socket-item-name">${item.name}</div>
      `;
      
      itemDiv.onclick = () => this.socketItem(key, category);
      grid.appendChild(itemDiv);
    }
  }
  
  socketItem(itemKey, category) {
    if (!this.currentSocket) return;
    
    const item = this.socketData[category]?.[itemKey];
    if (!item) return;
    
    this.currentSocket.className = 'socket-slot filled';
    this.currentSocket.innerHTML = `<img src="${item.img}" alt="${item.name}">`;
    
    this.currentSocket.dataset.itemKey = itemKey;
    this.currentSocket.dataset.category = category;
    this.currentSocket.dataset.itemName = item.name;
    this.currentSocket.dataset.levelReq = item.levelReq || 1;
    
    // Get stats for section
    const section = this.currentSocket.closest('.socket-container')?.dataset.section;
    const stats = typeof item.stats === 'object' ? item.stats[section] : item.stats;
    
    if (stats) {
      this.currentSocket.dataset.stats = stats;
    }
    
    this.hideSocketModal();
    this.currentSocket = null;
    this.updateAll();
  }

  // === JEWEL CREATION SYSTEM ===
  resetJewelModal() {
    this.selectedJewelColor = 'white';
    this.selectedJewelPrefix = null;
    this.selectedJewelSuffix = null;
    this.selectedJewelPrefixValue = null;
    this.selectedJewelSuffixValue = null;
    
    document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('selected'));
    document.querySelector('.color-option[data-color="white"]').classList.add('selected');
    document.getElementById('jewelPrefixSelect').value = '';
    document.getElementById('jewelSuffixSelect').value = '';
    document.getElementById('prefixValueContainer').style.display = 'none';
    document.getElementById('suffixValueContainer').style.display = 'none';
    
    this.updateJewelPreview();
  }
  
  updatePrefixValueInput() {
    const container = document.getElementById('prefixValueContainer');
    const valueInput = document.getElementById('prefixValue');
    const valueDisplay = document.getElementById('prefixValueDisplay');
    
    if (this.selectedJewelPrefix) {
      const prefixData = this.jewelPrefixes[this.selectedJewelPrefix];
      const range = this.extractValueRange(prefixData.effect);
      
      container.style.display = 'block';
      valueInput.min = range.min;
      valueInput.max = range.max;
      valueInput.value = range.min;
      valueDisplay.textContent = range.min;
      this.selectedJewelPrefixValue = range.min;
    } else {
      container.style.display = 'none';
    }
  }
  
  updateSuffixValueInput() {
    const container = document.getElementById('suffixValueContainer');
    const valueInput = document.getElementById('suffixValue');
    const valueDisplay = document.getElementById('suffixValueDisplay');
    
    if (this.selectedJewelSuffix) {
      const suffixData = this.jewelSuffixes[this.selectedJewelSuffix];
      const range = this.extractValueRange(suffixData.effect);
      
      container.style.display = 'block';
      valueInput.min = range.min;
      valueInput.max = range.max;
      valueInput.value = range.min;
      valueDisplay.textContent = range.min;
      this.selectedJewelSuffixValue = range.min;
    } else {
      container.style.display = 'none';
    }
  }
  
  extractValueRange(effect) {
    const match = effect.match(/(\d+)\s+to\s+(\d+)/);
    if (match) {
      return { min: parseInt(match[1]), max: parseInt(match[2]) };
    }
    
    const singleMatch = effect.match(/(\d+)/);
    if (singleMatch) {
      const value = parseInt(singleMatch[1]);
      return { min: 1, max: value };
    }
    
    return { min: 1, max: 50 };
  }
  
  updateJewelPreview() {
    const preview = document.getElementById('jewelPreview');
    if (!preview) return;
    
    let jewelName = `${this.selectedJewelColor.charAt(0).toUpperCase() + this.selectedJewelColor.slice(1)} Jewel`;
    let stats = [];
    
    if (this.selectedJewelPrefix && this.selectedJewelPrefixValue) {
      const prefixData = this.jewelPrefixes[this.selectedJewelPrefix];
      const effect = prefixData.effect.replace(/\d+\s+to\s+\d+|\d+/, this.selectedJewelPrefixValue);
      stats.push(`+${effect}`);
    }
    
    if (this.selectedJewelSuffix && this.selectedJewelSuffixValue) {
      const suffixData = this.jewelSuffixes[this.selectedJewelSuffix];
      const effect = suffixData.effect.replace(/\d+\s+to\s+\d+|\d+/, this.selectedJewelSuffixValue);
      stats.push(`+${effect}`);
    }
    
    preview.innerHTML = `
      <div style="color: ${this.getJewelColor()}; font-weight: bold;">${jewelName}</div>
      ${stats.map(stat => `<div style="color: #4169e1;">${stat}</div>`).join('')}
    `;
  }
  
  getJewelColor() {
    const colors = {
      white: '#ffffff',
      blue: '#4169e1',
      yellow: '#ffd700',
      green: '#32cd32',
      orange: '#ff8c00',
      red: '#ff4500'
    };
    return colors[this.selectedJewelColor] || '#ffffff';
  }
  
  createCustomJewel() {
    if (!this.targetSocket) {
      alert('No socket selected');
      return;
    }
    
    this.targetSocket.className = 'socket-slot filled';
    this.targetSocket.innerHTML = `<img src="img/jewel1.png" alt="Custom Jewel">`;
    
    // Create custom stats string
    let stats = [];
    if (this.selectedJewelPrefix && this.selectedJewelPrefixValue) {
      const prefixData = this.jewelPrefixes[this.selectedJewelPrefix];
      const effect = prefixData.effect.replace(/\d+\s+to\s+\d+|\d+/, this.selectedJewelPrefixValue);
      stats.push(`+${effect}`);
    }
    
    if (this.selectedJewelSuffix && this.selectedJewelSuffixValue) {
      const suffixData = this.jewelSuffixes[this.selectedJewelSuffix];
      const effect = suffixData.effect.replace(/\d+\s+to\s+\d+|\d+/, this.selectedJewelSuffixValue);
      stats.push(`+${effect}`);
    }
    
    this.targetSocket.dataset.itemKey = 'custom-jewel';
    this.targetSocket.dataset.category = 'jewels';
    this.targetSocket.dataset.itemName = `${this.selectedJewelColor.charAt(0).toUpperCase() + this.selectedJewelColor.slice(1)} Jewel`;
    this.targetSocket.dataset.stats = stats.join(', ');
    this.targetSocket.dataset.levelReq = 1;
    
    const section = this.targetSocket.closest('.socket-container')?.dataset.section || 'weapon';
    
    this.hideJewelModal();
    this.updateItemDisplay(section);
    this.updateAll();
    
    // Reset selections
    this.selectedJewelColor = 'white';
    this.selectedJewelPrefix = null;
    this.selectedJewelSuffix = null;
    this.selectedJewelPrefixValue = null;
    this.selectedJewelSuffixValue = null;
    this.targetSocket = null;
  }

  // === SOCKET CONTAINER INITIALIZATION ===
  initializeSocketContainers() {
    const sections = ['weapon', 'helm', 'armor', 'shield', 'gloves', 'belts', 'boots', 'ringone', 'ringtwo', 'amulet'];
    
    sections.forEach(section => {
      // Check if socket container already exists in HTML
      let container = document.querySelector(`.socket-container[data-section="${section}"]`);
      
      if (!container) {
        // Create new container if it doesn't exist
        const infoDiv = document.getElementById(this.getSectionInfoId(section));
        if (!infoDiv) return;
        
        container = document.createElement('div');
        container.className = 'socket-container';
        container.dataset.section = section;
        
        container.innerHTML = `
          <div class="socket-header">
            <span>Sockets:</span>
            <button class="add-socket-btn" title="Add Socket">+</button>
          </div>
          <div class="socket-grid"></div>
        `;
        
        infoDiv.appendChild(container);
      }
      
      // Ensure the add socket button works with our system
      const addBtn = container.querySelector('.add-socket-btn');
      if (addBtn) {
        // Remove any existing onclick handlers and add our event
        addBtn.removeAttribute('onclick');
        addBtn.onclick = () => this.addSocket(section);
      }
    });
    
    // Also make the global addSocket function work with our system
    window.addSocket = (section) => this.addSocket(section);
  }
  
  addSocket(section) {
    console.log(`üîß Adding socket to section: ${section}`);
    
    const container = document.querySelector(`.socket-container[data-section="${section}"]`);
    if (!container) {
      console.error(`‚ùå No socket container found for section: ${section}`);
      return;
    }
    
    const socketGrid = container.querySelector('.socket-grid');
    if (!socketGrid) {
      console.error(`‚ùå No socket grid found in container for section: ${section}`);
      return;
    }
    
    const existingSockets = socketGrid.children.length;
    const maxSockets = 6;
    
    console.log(`üìä Section ${section}: ${existingSockets}/${maxSockets} sockets`);
    
    if (existingSockets >= maxSockets) {
      alert(`Maximum ${maxSockets} sockets allowed`);
      return;
    }
    
    const newSocket = document.createElement('div');
    newSocket.className = 'socket-slot empty';
    newSocket.dataset.index = existingSockets.toString();
    
    socketGrid.appendChild(newSocket);
    
    const newSocketCount = existingSockets + 1;
    socketGrid.className = `socket-grid sockets-${newSocketCount}`;
    
    console.log(`‚úÖ Added socket ${newSocketCount} to ${section}`);
  }

  // === EVENT LISTENERS ===
  setupEventListeners() {
    // Class selection
    const classSelect = document.getElementById('selectClass');
    if (classSelect) {
      classSelect.addEventListener('change', () => this.handleClassChange());
    }
    
    // Level change
    const levelInput = document.getElementById('lvlValue');
    if (levelInput) {
      levelInput.addEventListener('input', () => this.handleLevelChange());
      levelInput.addEventListener('change', () => this.handleLevelChange());
    }
    
    // Stat changes
    ['str', 'dex', 'vit', 'enr'].forEach(stat => {
      const input = document.getElementById(stat);
      if (input) {
        input.addEventListener('input', () => this.updateAll());
      }
    });
    
    // Equipment changes
    Object.keys(this.equipmentMap).forEach(dropdownId => {
      const dropdown = document.getElementById(dropdownId);
      if (dropdown) {
        dropdown.addEventListener('change', () => {
          setTimeout(() => this.updateAll(), 50);
        });
      }
    });
    
    // Socket clicks (delegated)
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('socket-slot')) {
        this.handleSocketClick(e);
      }
    });
  }
  
  handleSocketClick(e) {
    const socket = e.target;
    
    if (socket.classList.contains('filled')) {
      if (e.shiftKey || e.ctrlKey) {
        this.clearSocket(socket);
      } else {
        this.currentSocket = socket;
        this.showSocketModal();
      }
    } else {
      this.currentSocket = socket;
      this.showSocketModal();
    }
  }
  
  clearSocket(socket) {
    socket.className = 'socket-slot empty';
    socket.innerHTML = '';
    
    ['itemKey', 'category', 'itemName', 'stats', 'levelReq'].forEach(attr => {
      delete socket.dataset[attr];
    });
    
    this.updateAll();
  }

  // === STYLES ===
  addStyles() {
    const styles = document.createElement('style');
    styles.textContent = `
      /* Socket Modal Styles */
      .socket-modal {
        display: none;
        position: fixed;
        z-index: 10000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.8);
        justify-content: center;
        align-items: center;
      }
      
      .socket-modal-content {
        background: #1a1a1a;
        border: 2px solid #444;
        border-radius: 8px;
        padding: 20px;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        color: #fff;
      }
      
      .socket-close {
        color: #999;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        line-height: 1;
      }
      
      .socket-close:hover {
        color: #fff;
      }
      
      .socket-tabs {
        display: flex;
        margin: 20px 0;
        border-bottom: 1px solid #444;
      }
      
      .socket-tab {
        background: #333;
        border: none;
        color: #ccc;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 4px 4px 0 0;
        margin-right: 2px;
      }
      
      .socket-tab.active {
        background: #555;
        color: #fff;
      }
      
      .socket-item-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 10px;
        margin-top: 15px;
      }
      
      .socket-item {
        background: #2a2a2a;
        border: 2px solid #444;
        border-radius: 6px;
        padding: 10px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .socket-item:hover {
        border-color: #666;
        background: #333;
      }
      
      .socket-item img {
        width: 32px;
        height: 32px;
        display: block;
        margin: 0 auto 8px;
      }
      
      .socket-item-name {
        font-size: 12px;
        color: #ccc;
        word-wrap: break-word;
      }
      
      .custom-jewel-item {
        background: #2a2a4a;
        border-color: #4169e1;
      }
      
      /* Socket Container Styles */
      .socket-container {
        margin-top: 15px;
        padding: 10px;
        background: #f8f8f8;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      
      .socket-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        font-weight: bold;
        color: #333;
      }
      
      .add-socket-btn {
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
        font-size: 14px;
        line-height: 1;
      }
      
      .add-socket-btn:hover {
        background: #45a049;
      }
      
      .socket-grid {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
      }
      
      .socket-slot {
        width: 40px;
        height: 40px;
        border: 2px solid #999;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s;
        background: #fff;
      }
      
      .socket-slot.empty {
        background: #f0f0f0;
        border-style: dashed;
      }
      
      .socket-slot.filled {
        border-color: #4CAF50;
        background: #e8f5e8;
      }
      
      .socket-slot:hover {
        border-color: #666;
        background: #e8e8e8;
      }
      
      .socket-slot img {
        width: 32px;
        height: 32px;
        object-fit: contain;
      }
      
      /* Jewel Creation Styles */
      .jewel-creation-section {
        margin: 20px 0;
        padding: 15px;
        background: #2a2a2a;
        border-radius: 6px;
      }
      
      .jewel-creation-section h4 {
        margin: 0 0 10px 0;
        color: #fff;
      }
      
      .jewel-color-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
      }
      
      .color-option {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        border: 2px solid transparent;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .color-option.selected {
        border-color: #4169e1;
        background: #333;
      }
      
      .color-circle {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 1px solid #666;
      }
      
      .white-jewel { background: #ffffff; }
      .blue-jewel { background: #4169e1; }
      .yellow-jewel { background: #ffd700; }
      .green-jewel { background: #32cd32; }
      .orange-jewel { background: #ff8c00; }
      .red-jewel { background: #ff4500; }
      
      .jewel-creation-section select {
        width: 100%;
        padding: 8px;
        background: #333;
        color: #fff;
        border: 1px solid #555;
        border-radius: 4px;
      }
      
      .jewel-creation-section input[type="range"] {
        width: 100%;
        margin: 8px 0;
      }
      
      #jewelPreview {
        padding: 15px;
        background: #1a1a1a;
        border: 1px solid #555;
        border-radius: 4px;
        min-height: 60px;
      }
      
      .create-jewel-btn {
        background: #4CAF50;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
        margin-top: 15px;
      }
      
      .create-jewel-btn:hover {
        background: #45a049;
      }
      
      /* Socket enhanced stats */
      .socket-enhanced-stat {
        color: #4169e1;
        font-weight: bold;
      }
      
      /* Level requirement colors */
      .level-requirement-met {
        color: #00ff00 !important;
      }
      
      .level-requirement-not-met {
        color: #ff5555 !important;
      }
      
      /* Responsive design */
      @media (max-width: 768px) {
        .socket-modal-content {
          width: 95%;
          padding: 15px;
        }
        
        .socket-item-grid {
          grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        }
        
        .jewel-color-grid {
          grid-template-columns: repeat(2, 1fr);
        }
      }
    `;
    
    document.head.appendChild(styles);
  }
}

// === GLOBAL INITIALIZATION ===
let unifiedSystem;

console.log('üì¶ Socket.js file loaded');

function initUnifiedSystem() {
  console.log('üöÄ initUnifiedSystem called');
  
  if (unifiedSystem) {
    console.log('‚ö†Ô∏è System already initialized');
    return;
  }
  
  try {
    console.log('üîß Creating new UnifiedSocketSystem...');
    unifiedSystem = new UnifiedSocketSystem();
    
    // Global accessibility for backward compatibility
    window.unifiedSystem = unifiedSystem;
    window.statsCalculator = unifiedSystem;
    window.characterSystem = unifiedSystem;
    
    console.log('‚úÖ UnifiedSocketSystem created successfully');
    console.log('üîç Testing: window.addSocket =', typeof window.addSocket);
    
  } catch (error) {
    console.error('‚ùå Error creating UnifiedSocketSystem:', error);
  }
}

// Multiple initialization strategies
console.log('üìä Document ready state:', document.readyState);

if (document.readyState === 'loading') {
  console.log('‚è≥ Waiting for DOMContentLoaded...');
  document.addEventListener('DOMContentLoaded', () => {
    console.log('‚úÖ DOMContentLoaded fired');
    initUnifiedSystem();
  });
} else {
  console.log('üèÉ DOM already ready, initializing immediately');
  initUnifiedSystem();
}

// Fallback initialization
setTimeout(() => {
  if (!unifiedSystem) {
    console.log('‚è∞ Fallback initialization...');
    initUnifiedSystem();
  }
}, 500);

// Another fallback for after all scripts load
window.addEventListener('load', () => {
  if (!unifiedSystem) {
    console.log('üîÑ Window load fallback initialization...');
    initUnifiedSystem();
  }
});

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = UnifiedSocketSystem;
}